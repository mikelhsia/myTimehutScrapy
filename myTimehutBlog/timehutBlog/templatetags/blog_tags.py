from django import template
from django.shortcuts import get_list_or_404
from django.utils.safestring import mark_safe
import markdown

# This variable is an instance of template.Library and it's used to register your own template tags and filters.
register = template.Library()

from ..models import PeekabooCollection, PeekabooMoment

# Django will use the function's name as the tag name. If you want to register it with a different name,
# you can do it by specifying a name attribute like @register.simple_tag(name='my_tag').
@register.simple_tag
def total_collections():
	return PeekabooCollection.objects.count()

@register.simple_tag
def get_thumbnail_by_collection_id(collection_id):
	return get_list_or_404(PeekabooMoment, event=collection_id)[0].src_url

# Tag to display the latest posts in the sidebar of the blog
@register.inclusion_tag('collection/latest_collections.html')
def show_latest_collections(count=5):
	latest_collections = PeekabooCollection.objects.order_by('-created_at')[:count]
	return {'latest_collections': latest_collections}

# Django escapes the HTML code generated by filters
@register.filter(name='markdown')
def markdown_format(text):
	'''
	We use the mark_safe function provided by Django to mark the result as safe HTML
	to be rendered in the template. By default, Django will not trust any HTML code and
	will escape it before placing it into the output. The only exception are variables
	that are marked safe from escaping. This behavior prevents Django from outputting
	potentially dangerous HTML and allows you to create exceptions when you know you are
	returning safe HTML.

	:param text:
	:return:
	'''
	return mark_safe(markdown.markdown(text))
