"""
Django settings for myTimehutBlog project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from django.urls import reverse_lazy

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'r+0&8fg&-*7u*hr_3x(_g+wj1y00##*p=a+1r-^y%mh$6k!@2*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '127.0.0.1',
    'hsia.timehut.blog.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'timehutBlog',
    'django.contrib.sites',             # For generating the sitemap
    'django.contrib.sitemaps',          #
	'social_django',                    # python social auth django framework
	'images',                           # Define a model to store images and their information.
										# Create a form and a view to handle image uploads.
										# Build a system for users to be able to post images they find in external websites.
	'actions',
]

# Site ID
SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myTimehutBlog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myTimehutBlog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'peekaboo',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': 'michael0512',
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Email SMTP settings
# https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-EMAIL_HOST
ACCOUNT_ACTIVATION_DAYS=7
EMAIL_HOST = 'smtp.mailtrap.io'
EMAIL_USE_TLS = 1
EMAIL_PORT = 2525
EMAIL_HOST_USER = 'eff326c8adc5db'
EMAIL_HOST_PASSWORD = 'f93a609f36c0b7'


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'


# Tells Django which URL to redirect after login if the contrib.auth.views.login view gets no next parameter
LOGIN_REDIRECT_URL = reverse_lazy('timehutBlog:dashboard')
# Is the URL to redirect the user to log in (e.g. using the login_required decorator)
LOGIN_URL = reverse_lazy('timehutBlog:login')
# Is the URL to redirect the user to log out
LOGOUT_URL = reverse_lazy('timehutBlog:logout')


# Media folder for Pillow (PIL) python package
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')


# Authentication backend settings
# We keep the default ModelBackend that is used to authenticate with username and password, and we include
# our own email-based authentication backend.
# --------------------------------------------------------------------------------------------------------
# http://python-social-auth.readthedocs.io/en/latest/configuration/django.html
AUTHENTICATION_BACKENDS = {
    'social_core.backends.open_id.OpenIdAuth',      # auth django backend
    'social_core.backends.google.GoogleOpenId',     # auth django backend
    'social_core.backends.google.GoogleOAuth2',     # auth django backend
    'social_core.backends.google.GoogleOAuth',      # auth django backend
    'social_core.backends.twitter.TwitterOAuth',    # auth django backend
    'social_core.backends.yahoo.YahooOpenId',       # auth django backend
    'django.contrib.auth.backends.ModelBackend',    # default auth backend
    'timehutBlog.authentication.EmailAuthBackend',  # custom auth backend
}

# Specify an URL for a model is by adding the ABSOLUTE_URL_OVERRIDES settings to the project, to replace get_absolute_url()
# Django adds a get_absolute_url() method dynamically to any models that appear in the ABSOLUTE_URL_OVERRIDES settings.
ABSOLUTE_URL_OVERRIDES = {
    'auth.user': lambda u: reverse_lazy('timehutBlog:user_detail', args=[u.username]),
}


# The redis-py offers two classes for interacting with Redis: StrictRedis and Redis. Both offer the same functionality.
# The StrictRedis class attempts to adhere to the official Redis command syntax.
# The Redis class extends StrictRedis overriding some methods to provide backwards compatibility.
REDIS_HOST = 'localhost'
REDIS_PORT = 6379
REDIS_DB = 0
